// SPDX-License-Identifier: MIT
pragma solidity ^0\.8\.0;

contract BubatzCoin {
    string public name = "BUBATZ COIN official (CSC/DCV)";
    string public symbol = "BBC";
    uint8 public decimals = 9;
    uint256 public totalSupply;
    address public owner;
    bool public mintable = true;
    uint256 public difficulty = 10**32; // Beispielwert für die Schwierigkeit

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    event Mined(address indexed miner, uint256 reward);

    modifier onlyOwner() {
        require(msg\.sender == owner, "Only the owner can perform this action");
        _;
    }

    constructor(uint256 _initialSupply) {
        owner = msg\.sender;
        totalSupply = _initialSupply * 10 ** uint256(decimals);
        balanceOf[msg\.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg\.sender] >= _value, "Insufficient balance");
        balanceOf[msg\.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg\.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg\.sender][_spender] = _value;
        emit Approval(msg\.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from], "Insufficient balance");
        require(_value <= allowance[_from][msg\.sender], "Allowance exceeded");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg\.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function mint(address _to, uint256 _value) public onlyOwner returns (bool success) {
        require(mintable, "Minting is disabled");
        totalSupply += _value;
        balanceOf[_to] += _value;
        emit Mint(_to, _value);
        return true;
    }

    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg\.sender] >= _value, "Insufficient balance to burn");
        balanceOf[msg\.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg\.sender, _value);
        return true;
    }

    function mine(uint256 nonce) public returns (bool success) {
        bytes32 hash = keccak256(abi\.encodePacked(nonce, msg\.sender));
        require(uint256(hash) < difficulty, "Hash does not meet difficulty requirements");
        uint256 reward = 50 * 10 ** uint256(decimals); // Beispielwert für die Belohnung
        totalSupply += reward;
        balanceOf[msg\.sender] += reward;
        emit Mined(msg\.sender, reward);
        return true;
    }
}
