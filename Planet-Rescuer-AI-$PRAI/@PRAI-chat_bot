<!DOCTYPE html>
<html>
<head>
    <title>PRAI Chatbox</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 20px;
        }
        .chat-container {
            width: 400px;
            margin: 0 auto;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #fff;
            padding: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .messages {
            height: 300px;
            overflow-y: scroll;
            border-bottom: 1px solid #ccc;
            margin-bottom: 10px;
            padding: 5px;
        }
        .message {
            margin: 10px 0;
        }
        .message.user {
            text-align: right;
        }
        .message.prai {
            text-align: left;
        }
        .input-container {
            display: flex;
        }
        .input-container input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 5px;
        }
        .input-container button {
            padding: 10px;
            border: none;
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="messages" id="messages">
            <!-- Nachrichten werden hier angezeigt -->
        </div>
        <div class="input-container">
            <input type="text" id="userInput" placeholder="Schreibe eine Nachricht...">
            <button onclick="sendMessage()">Senden</button>
        </div>
    </div>

    <script>
        const MS_API_KEY = 'YOUR_MICROSOFT_TRANSLATOR_TEXT_API_KEY';
        const DEEPL_API_KEY = 'YOUR_DEEPL_API_KEY';
        const APERTIUM_API_URL = 'https://apertium.org/api/translate?markUnknown=false';
        const HELSINKI_NLP_MODEL = 'Helsinki-NLP/opus-mt-en-de';
        const GOOGLE_NLP_API_KEY = 'YOUR_GOOGLE_NLP_API_KEY';
        const OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY';

        const greetings = {
            "de": "Hallo @RFOF-NETWORK, mein Name ist @PRAI. Wie kann ich Ihnen heute an diesem schönen Tag behilflich sein?",
            "en": "Hello @RFOF-NETWORK, my name is @PRAI. How can I assist you on this beautiful day?",
            "fr": "Bonjour @RFOF-NETWORK, je m'appelle @PRAI. Comment puis-je vous aider en cette belle journée?",
            "es": "Hola @RFOF-NETWORK, mi nombre es @PRAI. ¿Cómo puedo ayudarte en este hermoso día?",
            "jp": "こんにちは @RFOF-NETWORK, 私の名前は @PRAI です。今日はどのようにお手伝いできますか?",
            // Weitere Sprachen hinzufügen
        };

        const conversationHistory = JSON.parse(localStorage.getItem('conversationHistory')) || [];

        function sendMessage() {
            const input = document.getElementById('userInput');
            const message = input.value;
            if (message.trim() !== '') {
                addMessage(message, 'user');
                conversationHistory.push({ sender: 'user', text: message });
                localStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));
                input.value = '';
                // Antwort von PRAI basierend auf der Frage generieren
                generateResponse(message).then(response => {
                    addMessage(response, 'prai');
                    conversationHistory.push({ sender: 'prai', text: response });
                    localStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));
                });
            }
        }

        async function generateResponse(message) {
            const translatedMessage = await translateMessage(message, 'de');
            if (translatedMessage) {
                const analyzedMessage = await analyzeMessage(translatedMessage);
                return getRelevantResponse(analyzedMessage);
            }

            // Standardantwort, wenn keine Analyse möglich ist
            return "Das verstehe ich leider nicht.";
        }

        async function translateMessage(message, targetLang) {
            try {
                // Versuch der Übersetzung mit verschiedenen Diensten
                const msTranslation = await translateWithMicrosoft(message, targetLang);
                if (msTranslation) return msTranslation;

                const deepLTranslation = await translateWithDeepL(message, targetLang);
                if (deepLTranslation) return deepLTranslation;

                const apertiumTranslation = await translateWithApertium(message, targetLang);
                if (apertiumTranslation) return apertiumTranslation;

                const helsinkiTranslation = await translateWithHelsinkiNLP(message, targetLang);
                if (helsinkiTranslation) return helsinkiTranslation;

                return null;
            } catch (error) {
                console.error('Error translating message:', error);
                return null;
            }
        }

        async function analyzeMessage(message) {
            try {
                const response = await fetch(`https://language.googleapis.com/v1/documents:analyzeSyntax?key=${GOOGLE_NLP_API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        document: {
                            type: 'PLAIN_TEXT',
                            content: message
                        },
                        encodingType: 'UTF8'
                    })
                });
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error analyzing message:', error);
                return null;
            }
        }

        async function translateWithMicrosoft(message, targetLang) {
            try {
                const response = await fetch(`https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to=${targetLang}`, {
                    method: 'POST',
                    headers: {
                        'Ocp-Apim-Subscription-Key': MS_API_KEY,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify([{ Text: message }])
                });
                const data = await response.json();
                return data[0]?.translations[0]?.text || null;
            } catch (error) {
                console.error('Microsoft Translator API Error:', error);
                return null;
            }
        }

        async function translateWithDeepL(message, targetLang) {
            try {
                const response = await fetch('https://api-free.deepl.com/v2/translate', {
                    method: 'POST',
                    headers: {
                        'Authorization': `DeepL-Auth-Key ${DEEPL_API_KEY}`,
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        text: message,
                        target_lang: targetLang.toUpperCase()
                    })
                });
                const data = await response.json();
                return data.translations[0]?.text || null;
            } catch (error) {
                console.error('DeepL API Error:', error);
                return null;
            }
        }

        async function translateWithApertium(message, targetLang) {
            try {
                const response = await fetch(APERTIUM_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        q: message,
                        source: 'en',
                        target: targetLang
                    })
                });
                const data = await response.json();
                return data.responseData.translatedText || null;
            } catch (error) {
                console.error('Apertium API Error:', error);
                return null;
            }
        }

        async function translateWithHelsinkiNLP(message, targetLang) {
            try {
                const response = await fetch(`https://api.helsinki-nlp.com/translate?model=${HELSINKI_NLP_MODEL}&text=${encodeURIComponent(message)}`);
                const data = await response.json();
                return data.translation || null;
            } catch (error) {
                console.error('Helsinki-NLP API Error:', error);
                return null;
            }
        }

        function getRelevantResponse(analyzedMessage) {
            // Nutze die analysierten Daten, um eine relevante Antwort zu erzeugen.
            // Dies könnte durch eine kontextuelle Analyse und Bewertung erfolgen.
            return `Das klingt interessant! Erzähl mir mehr darüber.`;
        }

        function addMessage(text, sender) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            messageDiv.textContent = text;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function startVirtualConversation() {
            const messagesDiv = document.getElementById('messages');
            messagesDiv.innerHTML = '';
            addMessage("Hallo @RFOF-NETWORK, mein Name ist @PRAI. Wie kann ich Ihnen heute an diesem schönen Tag behilflich sein?", 'prai');
            setTimeout(() => {
                addMessage("
